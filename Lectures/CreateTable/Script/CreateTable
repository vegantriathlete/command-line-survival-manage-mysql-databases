All the data in a database

is stored inside tables.

Tables are comprised of columns and rows.

When you create a table,

one of the things you must do

is to define the columns.

As data is stored in the table

new rows are added.

Since this is a beginner course,

I will cover only a few simple

examples of defining a table.

Once I am logged in to the MySQL server

I will choose a database to use by entering

USE mydatabase;

Even though it is possible to explicitly state

in which database you wish to

create a table when you are creating it,

choosing the database first saves

a bit of typing when you have to

define many tables.

See the resources attached to this lecture

for a document that illustrates

the tables I will create

in the following examples.

For all of the examples

I will break the statement apart

into multiple lines so

that it's easier for you to read.

First I will create the employee table.

I have attached a resource

to this lecture with

the exact statement I've used.

I'll break down the parts of

the CREATE TABLE statement I have used.

For starters, I am using the first specification

of the possible statement patterns.

I am using just the CREATE, TABLE, tbl_name

and (create_definition, . . .) parts.

From all the possible options in

the create_definition grammar

I am using only col_name and column_definition.

I am using the first pattern for the column_definition.

The options I'm using for the column_definition are:

data_type, NOT NULL, AUTO_INCREMENT,

PRIMARY KEY and COMMENT.

The data_type types I used were:

CHAR, INTEGER, ENUM and DATE.

I chose to specify 64 bytes for the 

length of the character columns.

One important point to note

is that I had to name

the Terminated Date column

something other than "terminated"

because TERMINATED is a reserved word.

I can use

DESC employee;

to describe the table I just created.

You will notice that

there is no information about the comment column.

I can display that information by

querying the information_schema database,

that the MySQL server maintains,

with the following SELECT statement.

I have attached a resource to this lecture

with the exact statement.

Next I will create the employee_hours table.

I have attached a resource to this lecture

with the exact statement.

For this table,

in addition to using the id column

as the primary key,

I have another compound key.

Notice that I used the UNIQUE reserved word.

Also, since the key is comprised of multiple columns,

I need to specify it on its own.

So, I have added the use of the 

UNIQUE KEY option from the create_definition grammar.

I do not need to specify a separate key

for the id column because

the MySQL server can make use of

the key that I already specified.

This is because id is the first

part of the key.

I have made use of the TIMESTAMP

data type as well.

The truth is that the TIMESTAMP

data type also has the date.

So, it's really not necessary

for this table to have the Date column.

But, I'm pretending that the columns were

chosen by a non-technical person who

either didn't realize that it was possible

to store the date and time or who

specifically wanted the separate Date

column for some reason.

This type of thing may be sorted out

by a DBA, or it may be something that

you will encounter and

have to deal with on your own.

I'll finish up now by creating

the employee_file table.

I have attached a resource to this lecture

with the exact statement.

I have used the TEXT data type.

I also removed the UNIQUE reserved word

because it is possible to have

more than one note on the same day

for an employee.

These examples have given you an introduction

to creating tables via the command line.

You should now have an idea of

how to read the documentation

for this command.

The best way to learn more is to

experiment on your own.

Now that I've shown you how to create a table

I will show you how to destroy the table.

You can probably guess what the command is

since it's practically the same command

you use to destroy a database.

To delete a table and its contents enter

DROP TABLE yourtablname;

I'll get rid of the three tables I created by entering

DROP TABLE employee, employee_hours, employee_file;

Notice that I was able to use one statement to

drop all three tables at once.

If all you want to do is to empty a table

you can use the command

TRUNCATE TABLE yourtablename;

And that concludes all I'm going to

say about tables for now!

I'll see you in the next lecture!
